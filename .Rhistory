ordr <- order(tabres$est, decreasing = decreasing)
} else {
dists <- tapply(tabres$est, factor(tabres$c), FUN = function(x){
as.matrix(dist(
t(matrix(c(rep(0, length(x)), x), ncol = 2))
, method = "euclidean"))[1,2]
})
ordr <- order(dists, decreasing = decreasing)
}
}
}
# Insert start values into mixture model
model <- x
for(i in seq_along(ordr)){
dest_class <- names(model@submodels)[ordr[i]]
orig_class <- names(model@submodels)[i]
for(mtx in names(model[[dest_class]]@matrices)){
model[[dest_class]][[mtx]]$values <- x[[orig_class]][[mtx]]$values
}
}
model$weights$values <- (model$weights$values / model$weights$values[ordr[1]])[ordr]
#model <- mxRun(model)
return(model)
}
tmp
res_reorder2 <- mx_switch_labels(res1, decreasing = TRUE)
tmp <- sapply(list(res1, res_reorder2, res2, res3), function(x){
table_results(x)$est_sig
})
tmp
res_reorder2 <- mx_switch_labels(res1, decreasing = FALSE)
tmp <- sapply(list(res1, res_reorder2, res2, res3), function(x){
table_results(x)$est_sig
})
tmp
mx_switch_labels <- function(x, param = "weights", decreasing = TRUE, order = NULL){
if(is.null(order)){
if(param == "weights"){
coefs <- x$weights$values
ordr <- order(coefs, decreasing = decreasing)
} else {
browser()
tabres <- table_results(x, columns = NULL)
tabres$c <- gsub("^(class\\d+)\\..+$", "\\1", tabres$name)
if(grepl("\\[\\d+,\\d+\\]", param)){
tabres$p <- gsub("^class\\d+\\.(.+)$", "\\1", tabres$name)
} else {
tabres$p <- tabres$matrix
}
tabres <- tabres[, c("c", "p", "est")]
tabres <- tabres[grepl("^class", tabres$c), ]
tabres <- tabres[tabres$p %in% param, ]
if(!any(duplicated(tabres$c))){
ordr <- order(tabres$est, decreasing = decreasing)
} else {
dists <- tapply(tabres$est, factor(tabres$c), FUN = function(x){
as.matrix(dist(
t(matrix(c(rep(0, length(x)), x), ncol = 2))
, method = "euclidean"))[1,2]
})
ordr <- order(dists, decreasing = decreasing)
}
}
}
browser()
# Insert start values into mixture model
model <- x
for(i in seq_along(ordr)){
dest_class <- names(model@submodels)[ordr[i]]
orig_class <- names(model@submodels)[i]
for(mtx in names(model[[dest_class]]@matrices)){
model[[dest_class]][[mtx]]$values <- x[[orig_class]][[mtx]]$values
}
}
model$weights$values <- (model$weights$values / model$weights$values[ordr[1]])[ordr]
#model <- mxRun(model)
return(model)
}
res_reorder2 <- mx_switch_labels(res1, decreasing = FALSE)
tmp <- sapply(list(res1, res_reorder2, res2, res3), function(x){
table_results(x)$est_sig
})
tmp
ordr
res_reorder2 <- mx_switch_labels(res1, decreasing = T)
tmp <- sapply(list(res1, res_reorder2, res2, res3), function(x){
table_results(x)$est_sig
})
tmp
ordr
tmp <- sapply(list(res1, res_reorder2, res2, res3), function(x){
table_results(x)$est_sig
})
tmp
table_results(res_reorder2)
table_results(res1)
res_reorder2 <- mx_switch_labels(res1, decreasing = FALSE); table_results(res_reorder2)
res_reorder2 <- mx_switch_labels(res1, decreasing = TRUE); table_results(res_reorder2)
res_reorder2 <- mx_switch_labels(res1, decreasing = TRUE); table_results(res_reorder2)
table_results(x)
table_results(model)
seq_along(ordr)
i=1
ordr
dest_class <- names(model@submodels)[ordr[i]]
dest_class
dest_class <- names(model@submodels)[ordr[i]]
orig_class <- names(model@submodels)[i]
dest_class
orig_class
model$class1$M
model$class1$M$values
model$class2$M$values
model$weights$values
model$class1$M$values
model$class2$M$values
table_results(model)
summary(model)
summary(mxRun(model))
desc <- tidySEM::descriptives(df)
df
desc
library(tidySEM)
# Load data
df <- data_mix_ordinal
descriptives(df)
df
desc <- tidySEM::descriptives(df)
desc
dput(names(desc), "clipboard")
desc <- desc[, c("name", "type", "n", "missing", "unique",
"mode", "mode_value", "v")
]
papaja::apa_table(desc)
papaja::apa_table(desc)
df_plot <- reshape(df, varying = names(df), direction = "long")
names(df) <- paste0("u.", 1:4)
df_plot <- reshape(df, varying = names(df), direction = "long")
df_plot
ggplot(df_plot, aes(x = u)) +
geom_bar() +
facet_wrap(~time)+
theme_bw()
ggsave("plot_desc.svg", p, device = "svg", width = 100, height = 100, units = "mm")
p <- ggplot(df_plot, aes(x = u)) +
geom_bar() +
facet_wrap(~time)+
theme_bw()
ggsave("plot_desc.svg", p, device = "svg", width = 100, height = 100, units = "mm")
knitr::include_graphics("plot_desc.svg")
sample.int(nrow(df), 10)
sample.int(ncol(df), 10)
df[sample.int(nrow(df), 10), sample.int(ncol(df), 10, replace = TRUE)] <- NA
df2 <- mice::ampute(df, prop = .01)
df2$amp
descriptives(df2$amp)
df <- df2$amp
df[] <- lapply(df, ordered)
descriptives(df2$amp)
descriptives(df)
res <- mx_lca(data = df, classes = 1:2) # fitting LCA 1 to 4
names(df) <- paste0("Variable.u", 1:4)
df_plot <- reshape(df, varying = names(df), direction = "long")
p <- ggplot(df_plot, aes(x = u)) +
geom_bar() +
facet_wrap(~time)+
theme_bw()
p
names(df) <- paste0("Value.u", 1:4)
df_plot <- reshape(df, varying = names(df), direction = "long")
p <- ggplot(df_plot, aes(x = Value)) +
geom_bar() +
facet_wrap(~time)+
theme_bw()
p
p <- ggplot(df_plot, aes(x = Value)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
o
p
ggplot(df_plot, aes(x = Value)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
View(df_plot)
table(df_plot$Value)
table(df_plot$Value, useNA = "always")
ggplot(df_plot, aes(x = Value)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
ggplot(df_plot, aes(x = Value)) +
geom_bar(stat = "bin", na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
ggplot(df_plot, aes(x = Value)) +
geom_bar(stat = "count", na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
res <- mx_lca(data = df, classes = 1:2) # fitting LCA 1 to 4
names(df) <- paste0("u", 1:4)
res <- mx_lca(data = df, classes = 1:2) # fitting LCA 1 to 4
table_fit(res)
res <- mx_lca(data = df, classes = 1:4) # fitting LCA 1 to 4
saveRDS(res, "res.RData")
saveRDS(df, "c:/tmp/df.Rdata")
res <- readRDS("res.RData")
res
res
remotes::install_github("MichelNivard/GPTstudio")
install.packages("openai")
remotes::install_github("MichelNivard/GPTstudio")
Sys.setenv(
OPENAI_API_KEY = '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'
)
qnorm(.05, lower.tail = F)
5.5+(qnorm(.05, lower.tail = F)*2)
5.5+(qnorm(.05)*2)
5.5+(qnorm(.025, lower.tail = F)*2)
pnorm(-1)
pnorm(-3)
100-(2*pnorm(-3))
100-(2*pnorm(-4))
100-(3*15)
100+(3*15)
100+(2*15)
100-(2*15)
100-(2*pnorm(1))
100-(2*pnorm(-1))
100+(2*pnorm(-1))
100-15
100+15
100+(3*15)
sqrt(76)
6^2
7^2
8^2
2/8
.5/.25
pnorm(-2)
pnorm(-1.99)
pnorm(-1.96)
.5/(2/64)
pnorm(-16)
7^2
sqrt(132)
sqrt(12)
sqrt(14)
sqrt(16)
sqrt(9)
50/3
3*4
(3*4)*3
(3*4)*4
48/3
48/3
qnorm(.025)
175-(1.96*16)
175+(1.96*16)
175+(1.64*16)
175-(1.64*16)
48/4
175+(1.96*12)
175-(1.96*12)
48/sqrt(16*9)
175-(1.96*4)
175+(1.96*4)
175+(1.96*16)
sqrt(76)
sqrt(79)
sqrt(80-)
9^2
256*2
descriptives(iris)
descriptives(iris[1:50,
])
descriptives(iris[c(1:50, 51, 149),])
6.582 + 7*1.073
12.325 + 0*.389 + 1*-2.01+0*.05+0*.335
12.325 + -5*.389 + 1*-2.01+0*.05+0*.335
(12.325 + 0*.389 + 1*-2.01+0*.05+0*.335) - (12.325 + -5*.389 + 1*-2.01+0*.05+0*.335)
(12.325 + 0*.389 + 1*-2.01+0*.05+0*.335) - (12.325 + -5*.389 + 0*-2.01+0*.05+0*.335)
(12.325 + 0*.389 + 1*-2.01) - (12.325 + -5*.389 + 0*-2.01)
(0*.389 + 1*-2.01) - (-5*.389 + 0*-2.01)
(0*.389) - (-5*.389)
5*2.01
5*.368
21.073+1.386
21.073-4.215
21.073-2.35
papaja::apa_table(desc, caption = "Descriptive statistics for ordinal items")
table_fit(res)
fit_table <- table_fit(res) # model fit table
fit_table[ , c("Name", "LL", "Parameters",
"AIC", "BIC", "Entropy",
"prob_min", "prob_max",
"n_min", "n_max")] # our selec
fit_table <- table_fit(res) # model fit table
tab <- fit_table[ , c("Name", "LL", "Parameters",
"AIC", "BIC", "Entropy",
"prob_min", "prob_max",
"n_min", "n_max")] # our selection
papaja::apa_table(tab, caption = "Model fit table")
papaja::apa_table(tab, caption = "Model fit table")
table_fit(res)
plot(res)
table_results(res)
library(tidySEM)
table_results(res)
table_results(res[[2]])
res <- readRDS("res.RData")
table_fit(res)
tmp = table_fit(res)
which.min(tmp$BIC)
tmp$lmr_p
round(tmp$lmr_p, 3)
tmp = class_prob(res[[4]])
tmp$sum.posterior
tmp$sum.mostlikely
fit_table <- table_fit(res) # model fit table
tab <- fit_table[ , c("Name", "LL", "Parameters",
"BIC", "Entropy",
"prob_min", "prob_max",
"n_min", "n_max")] # our selec
tab
tab <- fit_table[ , c("Name", "LL", "Parameters",
"BIC", "Entropy",
"prob_min", "prob_max",
"n_min", "n_max", "lmr_p")]
df <- tidySEM::data_mix_ordinal
.0004*5000
5*(35/4)
anyNA(df)
plot(res)
tab <- table_results(res)
tab <- table_results(res[[2]])
tab <- table_results(res[[2]])
tab
tab <- table_results(res[[2]])
tab <- table_results(res[[2]])
tab
tab
tab <- table_results(res[[2]], columns = NULL)
tab
table_prob(res[[2]])
coef(res[[2]])
plot_prob(res[[2]])
wald_test(res[[2]], "class1.mat_dev[1,1] = class2.mat_dev[1,1] & class1.mat_dev[2,1] = class2.mat_dev[2,1]")
wald_test(res[[2]], "class1.mat_dev[1,1] = class2.mat_dev[1,1] & class1.mat_dev[1,1]+class1.mat_dev[2,1] = class2.mat_dev[2,1]+class2.mat_dev[1,1]")
p <- plot_prob(res[[2]])
p
ggsave("plotprob.svg", p, device = "svg", width = 100, height = 100, units = "mm")
knitr::include_graphics("plotprob.svg")
plot_prob(res[[2]])
car::linearHypothesis(res[[2]], "class1.mat_dev[1,1]=class2.mat_dev[1,1]&class1.mat_dev[1,1]+class1.mat_dev[2,1]=class2.mat_dev[2,1]+class2.mat_dev[1,1]")
car::linearHypothesis(res[[2]], "class1.mat_dev[1,1]=class2.mat_dev[1,1]")
car::linearHypothesis(res[[2]], "class1.mat_dev[1,1]+class1.mat_dev[2,1]=class2.mat_dev[2,1]+class2.mat_dev[1,1]")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df), direction = "long")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
p <- ggplot(df_plot, aes(x = Value)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
p
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
View(df_plot)
p <- ggplot(df_plot, aes(x = u)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
ggsave("plot_desc.svg", p, device = "svg", width = 100, height = 100, units = "mm")
knitr::include_graphics("plot_desc.svg")
df_plot <- df
df_plot <- do.call(rbind, df)
df_plot <- do.call(rbind, as.list(df))
df_plot <- do.call(rbind, df)
df_plot <- data.frame(Value = unlist(df))
df_plot <- data.frame(Value = unlist(df),
Variable = rep(names(df), each = nrow(df)))
ggplot(df_plot, aes(y=Value, x=Variable)) +
geom_bar(position="fill", stat="identity")
head(df_plot)
ggplot(df_plot, aes(fill = Value, x=Variable)) +
geom_bar(position="fill", stat="identity")
ggplot(df_plot, aes(y = Value, fill = Value, x=Variable)) +
geom_bar(position="fill", stat="identity")
df_plot <- data.frame(Value = unlist(df),
Variable = rep(names(df), nrow(df)))
ggplot(df_plot, aes(y = Value, fill = Value, x=Variable)) +
geom_bar(position="fill", stat="identity")
ggplot(df_plot, aes(y=Value)) +
geom_bar(position="fill", stat="identity")
ggplot(df_plot, aes(x = Variable, y=Value)) +
geom_bar(position="fill", stat="identity")
ggplot(df_plot, aes(x = Variable, y=Value)) +
geom_bar(position="fill")
ggplot(df_plot, aes(x = Variable, y=Value)) +
geom_col(position="fill")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
df_plot$time <- paste0("u", df_plot$time)
p <- ggplot(df_plot, aes(x = u)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()
ggsave("plot_desc.svg", p, device = "svg", width = 100, height = 100, units = "mm")
knitr::include_graphics("plot_desc.svg")
p <- ggplot(df_plot, aes(x = u)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()+
xlab(NULL)
ggsave("plot_desc.svg", p, device = "svg", width = 100, height = 100, units = "mm")
knitr::include_graphics("plot_desc.svg")
df_plot <- df
names(df_plot) <- paste0("u.", 1:4)
df_plot <- reshape(df_plot, varying = names(df_plot), direction = "long")
df_plot$time <- paste0("u", df_plot$time)
p <- ggplot(df_plot, aes(x = u)) +
geom_bar(na.rm = TRUE) +
facet_wrap(~time)+
theme_bw()+
xlab(NULL)
ggsave("plot_desc.pdf", p, device = "pdf", width = 100, height = 100, units = "mm")
knitr::include_graphics("plot_desc.pdf")
p <- plot_prob(res[[2]])
ggsave("plotprob.pdf", p, device = "pdf", width = 100, height = 50, units = "mm")
p <- plot_prob(res[[2]], bw = TRUE)
ggsave("plotprob.pdf", p, device = "pdf", width = 100, height = 50, units = "mm")
knitr::include_graphics("plotprob.pdf")
p
grade_testvision <- function(path, pattern, maxscore = NULL, guesscorrection = .25, boost = FALSE){
f <- list.files(path, pattern = pattern, full.names = T)
df_grades <- do.call(rbind, lapply(f, read.csv, stringsAsFactors = FALSE, skip = 1, header = F))
hdr <- readLines(f[1])[1]
hdr <- strsplit(hdr, split = ",")[[1]]
names(df_grades)[1:length(hdr)] <- hdr
start_blocks <- which(startsWith(names(df_grades), "subscores("))
colnams <- strsplit(gsub("(^.+?\\(|\\))", "", names(df_grades)[start_blocks]), split = "|", fixed = TRUE)[[1]]
ncols <- length(colnams)
cont <- TRUE
nblocks <- 0
while(isTRUE(cont)){
thiscol <- tryCatch(df_grades[-1, (start_blocks+(nblocks *ncols))], error = function(e){NULL})
if(!(all(is.na(thiscol))|is.null(thiscol))){
nblocks <- nblocks + 1
} else {
cont <- FALSE
}
}
# nblocks <- sum(grepl("^(Part|Question)", df_grades[3,]))
cols <- c(0:(nblocks-1))*ncols
# Get maxscore
if(is.null(maxscore)){
maxscore <- median(rowSums(df_grades[,((start_blocks + which(colnams == "maxscore"))-1)+cols]), na.rm = TRUE)
}
# Get individual scores
# tmp <- df_grades[, firstblock + cols]
tmp <- df_grades[,((start_blocks + which(colnams == "score"))-1)+cols]
MSG <- maxscore
GS <- guesscorrection*MSG
# Check
if(!all(rowSums(tmp) == df_grades$score, na.rm = T)) stop()
#if(any(rowSums(!(tmp[, -c(1:2)] == 0), na.rm = TRUE) > 1, na.rm = TRUE)) stop()
df_grades$grade = (10 * ((df_grades$score - GS) / (MSG - GS))) * c(1, 1.1)[as.integer(boost)+1]
df_grades$grade <- round(df_grades$grade, 1)
df_grades$grade[which(df_grades$grade < 1)] <- 1
print(round(prop.table(table(df_grades$grade >= 5.5)), 2))
return(df_grades)
}
library(readxl)
df_spss <- grade_testvision("c:/tmp", "2022-12-21", maxscore = 21)
grades_spss <- read_xlsx("c:/tmp/CORRECT_840099-B-6_20221221.xlsx", sheet = 1, skip = 7)
these_studs <- which(grades_spss$Studentnummer %in% df_spss$externalid)
grades_spss$Resultaat[these_studs] <- df_spss$grade[match(grades_spss$Studentnummer[these_studs], df_spss$externalid)]
check_stud <- sample(grades_spss$Studentnummer, 1)
grades_spss$Resultaat[which(grades_spss$Studentnummer == check_stud)]
df_spss$grade[which(df_spss$externalid == check_stud)]
grades_spss$Resultaat >= 5.5
grades_spss$Resultaat < 5.5 & grades_spss$Resultaat > 5.5
any(grades_spss$Resultaat < 5.5 & grades_spss$Resultaat > 5.5)
any(grades_spss$Resultaat < 5.5 & grades_spss$Resultaat > 5.5, na.rm = T)
table(factor(c(1,2,2,3), levels= c(1,2,3)))
table(factor(c(1,2,2,3), levels= c(1,2,3, 4)))
sqrt(64)
50/8
10/6.25
.05*36
library(tidySEM)
names(plas_depression)
names(plas_depression)
tmp <- iris[1:4]
names(tmp) = letters[1:4]
mx_profiles(tmp, 2, run = FALSE)
tmp <- mx_profiles(tmp, 2, run = FALSE)
tmp$weights
tmp$class1$M
out <- yaml::read_yaml("appendices/lpa.yml")
